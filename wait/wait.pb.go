// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.12.3
// source: wait.proto

// import "google/protobuf/empty.proto";

// option go_package = "github.com/hasebe/grpc-sample/wait";

package wait

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wait_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_wait_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_wait_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wait_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_wait_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_wait_proto_rawDescGZIP(), []int{1}
}

type ConnectionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval int32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Count    int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ConnectionDetail) Reset() {
	*x = ConnectionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wait_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionDetail) ProtoMessage() {}

func (x *ConnectionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_wait_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionDetail.ProtoReflect.Descriptor instead.
func (*ConnectionDetail) Descriptor() ([]byte, []int) {
	return file_wait_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectionDetail) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ConnectionDetail) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_wait_proto protoreflect.FileDescriptor

var file_wait_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x77, 0x61,
	0x69, 0x74, 0x22, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x44, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x32, 0x9c, 0x01, 0x0a, 0x04, 0x57, 0x61, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x0b, 0x2e, 0x77, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0d, 0x2e, 0x77, 0x61, 0x69, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x0c, 0x57, 0x61, 0x69, 0x74, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x16, 0x2e, 0x77, 0x61, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x0d, 0x2e, 0x77, 0x61, 0x69,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x30, 0x0a,
	0x0c, 0x57, 0x61, 0x69, 0x74, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e,
	0x77, 0x61, 0x69, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x77,
	0x61, 0x69, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wait_proto_rawDescOnce sync.Once
	file_wait_proto_rawDescData = file_wait_proto_rawDesc
)

func file_wait_proto_rawDescGZIP() []byte {
	file_wait_proto_rawDescOnce.Do(func() {
		file_wait_proto_rawDescData = protoimpl.X.CompressGZIP(file_wait_proto_rawDescData)
	})
	return file_wait_proto_rawDescData
}

var file_wait_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_wait_proto_goTypes = []interface{}{
	(*Message)(nil),          // 0: wait.Message
	(*Empty)(nil),            // 1: wait.Empty
	(*ConnectionDetail)(nil), // 2: wait.ConnectionDetail
}
var file_wait_proto_depIdxs = []int32{
	1, // 0: wait.Wait.GetTime:input_type -> wait.Empty
	2, // 1: wait.Wait.WaitByServer:input_type -> wait.ConnectionDetail
	0, // 2: wait.Wait.WaitByClient:input_type -> wait.Message
	0, // 3: wait.Wait.GetTime:output_type -> wait.Message
	0, // 4: wait.Wait.WaitByServer:output_type -> wait.Message
	0, // 5: wait.Wait.WaitByClient:output_type -> wait.Message
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wait_proto_init() }
func file_wait_proto_init() {
	if File_wait_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wait_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wait_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wait_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wait_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wait_proto_goTypes,
		DependencyIndexes: file_wait_proto_depIdxs,
		MessageInfos:      file_wait_proto_msgTypes,
	}.Build()
	File_wait_proto = out.File
	file_wait_proto_rawDesc = nil
	file_wait_proto_goTypes = nil
	file_wait_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WaitClient is the client API for Wait service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WaitClient interface {
	// A simple RPC.
	GetTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error)
	// A server-to-client streaming RPC.
	WaitByServer(ctx context.Context, in *ConnectionDetail, opts ...grpc.CallOption) (Wait_WaitByServerClient, error)
	// A client-to-server streaming RPC.
	WaitByClient(ctx context.Context, opts ...grpc.CallOption) (Wait_WaitByClientClient, error)
}

type waitClient struct {
	cc grpc.ClientConnInterface
}

func NewWaitClient(cc grpc.ClientConnInterface) WaitClient {
	return &waitClient{cc}
}

func (c *waitClient) GetTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/wait.Wait/GetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waitClient) WaitByServer(ctx context.Context, in *ConnectionDetail, opts ...grpc.CallOption) (Wait_WaitByServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Wait_serviceDesc.Streams[0], "/wait.Wait/WaitByServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &waitWaitByServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wait_WaitByServerClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type waitWaitByServerClient struct {
	grpc.ClientStream
}

func (x *waitWaitByServerClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waitClient) WaitByClient(ctx context.Context, opts ...grpc.CallOption) (Wait_WaitByClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Wait_serviceDesc.Streams[1], "/wait.Wait/WaitByClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &waitWaitByClientClient{stream}
	return x, nil
}

type Wait_WaitByClientClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type waitWaitByClientClient struct {
	grpc.ClientStream
}

func (x *waitWaitByClientClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waitWaitByClientClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WaitServer is the server API for Wait service.
type WaitServer interface {
	// A simple RPC.
	GetTime(context.Context, *Empty) (*Message, error)
	// A server-to-client streaming RPC.
	WaitByServer(*ConnectionDetail, Wait_WaitByServerServer) error
	// A client-to-server streaming RPC.
	WaitByClient(Wait_WaitByClientServer) error
}

// UnimplementedWaitServer can be embedded to have forward compatible implementations.
type UnimplementedWaitServer struct {
}

func (*UnimplementedWaitServer) GetTime(context.Context, *Empty) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTime not implemented")
}
func (*UnimplementedWaitServer) WaitByServer(*ConnectionDetail, Wait_WaitByServerServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitByServer not implemented")
}
func (*UnimplementedWaitServer) WaitByClient(Wait_WaitByClientServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitByClient not implemented")
}

func RegisterWaitServer(s *grpc.Server, srv WaitServer) {
	s.RegisterService(&_Wait_serviceDesc, srv)
}

func _Wait_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaitServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wait.Wait/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaitServer).GetTime(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wait_WaitByServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionDetail)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WaitServer).WaitByServer(m, &waitWaitByServerServer{stream})
}

type Wait_WaitByServerServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type waitWaitByServerServer struct {
	grpc.ServerStream
}

func (x *waitWaitByServerServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Wait_WaitByClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaitServer).WaitByClient(&waitWaitByClientServer{stream})
}

type Wait_WaitByClientServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type waitWaitByClientServer struct {
	grpc.ServerStream
}

func (x *waitWaitByClientServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waitWaitByClientServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Wait_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wait.Wait",
	HandlerType: (*WaitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTime",
			Handler:    _Wait_GetTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitByServer",
			Handler:       _Wait_WaitByServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WaitByClient",
			Handler:       _Wait_WaitByClient_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "wait.proto",
}
